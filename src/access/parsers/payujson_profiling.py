# Copyright 2025 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

"""Parser for payu JSON walltime data generated by payu.
The data to be parsed is written in the following form:

{
    "scheduler_job_id": "149764665.gadi-pbs",
    "scheduler_type": "pbs",
    # ... many more fields ...
    "timings": {
        "payu_start_time": "2025-09-16T08:52:50.748807",
        "payu_setup_duration_seconds": 47.73822930175811,
        "payu_model_run_duration_seconds": 6776.044810215011,
        "payu_run_duration_seconds": 6779.385873348918,
        "payu_archive_duration_seconds": 8.063649574294686,
        "payu_finish_time": "2025-09-16T10:46:48.974451",
        "payu_total_duration_seconds": 6838.225644
    },
    # ... more fields
}
"""

from access.parsers.profiling import ProfilingParser
import json


class PayuJSONProfilingParser(ProfilingParser):
    """Payu JSON job output profiling parser."""

    def __init__(self):
        """Instantiate Payu JSON profiling parser."""
        super().__init__()
        self._metrics = ["walltime"]

    @property
    def metrics(self) -> list:
        return self._metrics

    def read(self, stream: str) -> dict:

        try:
            timings = json.loads(stream)["timings"]
        except KeyError:
            raise KeyError('"timings" key missing in stream.')
        except json.JSONDecodeError:
            raise ValueError("Invalid JSON supplied.")

        # remove known keys not relevant to profiling
        for unwanted_key in ("payu_start_time", "payu_finish_time"):
            try:
                del timings[unwanted_key]
            except KeyError:
                continue

        result = {"regions": [], "walltime": []}

        # transpose dict to be consistent with other profiling parsers.
        for k, v in timings.items():
            result["regions"].append(k)
            result["walltime"].append(v)

        return result
